services:
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile.prod
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    restart: always

  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile.prod
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - NODE_ENV=production

  db:
    image: postgres:17.5
    restart: always
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    restart: always
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data_prod:
  redis_data_prod:
